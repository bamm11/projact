// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                   @id @default(autoincrement())
  firstName           String                @map("first_name")
  lastName            String                @map("last_name")
  email               String                @unique
  password            String
  phone               String?
  shopping_cart       Shopping_Cart?
  ShippingInformation ShippingInformation[]
  Orders              Orders[]
  Address             Address?
}

model Shopping_Cart {
  id        Int     @id @default(autoincrement())
  quantity  Int     @default(1)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int     @unique @map("user_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int     @map(" product_id")
}

model ShippingInformation {
  id           Int      @id @default(autoincrement())
  ShippingDate DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       Int      @map("user_id")
  orders       Orders   @relation(fields: [ordersId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ordersId     Int      @map("orders_id")
}

model Address {
  id          Int    @id @default(autoincrement())
  address     String
  city        String
  postalCode  String @map("postal_code")
  province    String
  district    String
  subDistrict String @map("sub_district")
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      Int    @unique @map("user_id")
}

model Orders {
  id                  Int                   @id @default(autoincrement())
  order_date          DateTime
  TotalAmount         Float
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId              Int                   @map("user_id")
  ShippingInformation ShippingInformation[]
  Payment             Payment[]
  Order_item          Order_item[]
}

model Order_item {
  id        Int     @id @default(autoincrement())
  qunatity  Int
  subtotal  Int
  orders    Orders  @relation(fields: [ordersId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ordersId  Int     @map("orders_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int     @map(" product_id")
}

model Product {
  id            Int             @id @default(autoincrement())
  name          String
  description   String?
  size          String
  color         String
  Price         Float
  picture       String
  Stock         Int             @default(0)
  Shopping_Cart Shopping_Cart[]
  Order_item    Order_item[]
  category      Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId    Int             @map(" category _id")
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String
  Product Product[]
}

model Payment {
  id            Int      @id @default(autoincrement())
  amount        Float
  paymentDate   DateTime
  paymentMethod String
  status        String
  orders        Orders   @relation(fields: [ordersId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ordersId      Int      @map("orders_id")
}
